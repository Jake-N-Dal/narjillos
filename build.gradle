// Plugins

apply plugin: 'java'
apply plugin: 'application'     // loads also the 'distribution' plugin
apply plugin: 'eclipse'
apply plugin: 'idea'

// Basic Configuration

sourceCompatibility = JavaVersion.VERSION_1_8

mainClassName = 'org.nusco.narjillos.NarjillosRunner'

// Dependencies

repositories {
    mavenCentral()
}

dependencies {
    compile 'com.google.code.gson:gson:2.3.1'
    compile 'commons-cli:commons-cli:1.2'
    compile 'org.yaml:snakeyaml:1.15'
    compile 'org.xerial:sqlite-jdbc:3.8.11.1'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.8.4'
}

// Programs

createProgramTask('narjillos', 'org.nusco.narjillos.NarjillosRunner', 'Runs Narjillos (same arguments as the \'narjillos\' script).')
createProgramTask('dnabrowser', 'org.nusco.narjillos.DNABrowserRunner', 'Runs the DNA Browser (pass it the *.germline filename).')
createProgramTask('lab', 'org.nusco.narjillos.Lab', 'Runs lab analysis (pass it the *.exp filename).')

// Tests

test {
    description "Runs standard suite of unit tests."
    include '**/*Test*'
    exclude '**/*PerformanceTest*'
    exclude '**/*DeterministicExperimentTest*'
    testLogging.showStandardStreams = true
}

task(testPerformance, dependsOn: 'compileJava', type: JavaExec) {
    description = 'Runs performance test.'
    group = 'verification'
    main = 'org.nusco.narjillos.PerformanceTest'
    classpath = sourceSets.test.runtimeClasspath
}

task(testDeterministic, dependsOn: 'compileJava', type: JavaExec) {
    description = 'Runs the (slow) test that checks whether the system is deterministic.'
    group = 'verification'
    main = 'org.nusco.narjillos.DeterministicExperimentTest'
    classpath = sourceSets.test.runtimeClasspath
}

task testAll(dependsOn: ['test', 'testDeterministic', 'testPerformance']) {
    description = 'Runs all the tests, including the slow tests, the database tests and the performance tests.'
    group = 'verification'
}

// Backlog Management

task(bl, dependsOn: 'build', type: JavaExec) {
    main = 'org.nusco.narjillos.Backlog'
    classpath = sourceSets.main.runtimeClasspath
    args commandLineArgsOr('all')
}

task(backlog, dependsOn: 'bl') {
    description = 'Prints the top of the backlog. Also aliased to \'bl\'.'
    group = 'development'
}

// Packaging

applicationDistribution.from(
        files(
                'version',
                'LICENSE',
                'README.md',
                'config.yaml'
        )
)

task writeDockerfile() {
    description = 'Generates a new Dockerfile for the current version.'
    def dockerfile = new File('Dockerfile')
    dockerfile.write ""
    dockerfile << "FROM java\n"
    dockerfile << "MAINTAINER Paolo \"Nusco\" Perrotta <paolo.nusco.perrotta@gmail.com>\n\n"
    dockerfile << "RUN wget https://github.com/nusco/narjillos/releases/download/v0.8.1/narjillos.zip -O narjillos.zip && unzip -o narjillos.zip && rm narjillos.zip\n"
    dockerfile << "WORKDIR narjillos\n"
    dockerfile << "CMD sh narjillos -f -s\n"
}

task createStartupScripts(dependsOn: 'installDist') {
    createScript('lab', 'org.nusco.narjillos.Lab')
    createScript('dnabrowser', 'org.nusco.narjillos.DNABrowserRunner')
}

task release(dependsOn: ['writeDockerfile', 'testAll', 'createStartupScripts', 'assemble']) {
    description = 'Runs all tests and packages a release.'
    group = 'distribution'
}

// Helpers

def createProgramTask(taskName, mainClassName, taskDescription) {
    tasks.create(name: taskName, type: JavaExec) {
        description = taskDescription
        group = 'programs'
        main = mainClassName
        classpath = sourceSets.main.runtimeClasspath
        args commandLineArgsOr([])
    }
}

def commandLineArgsOr(defaultArgs) {
    if (project.hasProperty('args') && project.getProperty('args').trim().length() > 0)
        return project.args.split('\\s+')
    else
        return defaultArgs
}

def createScript(name, mainClass) {
    def taskName = name + 'StartScript'
    tasks.create(name: taskName, type: CreateStartScripts) {
        outputDir = new File(buildDir, 'scripts')
        mainClassName = mainClass
        applicationName = name
        classpath = tasks[JavaPlugin.JAR_TASK_NAME].outputs.files + configurations.runtime
    }

    tasks[taskName].dependsOn(project.jar)

    applicationDistribution.with {
        into('bin/') {
            from(tasks[taskName])
            fileMode = 0755
        }
    }
}
