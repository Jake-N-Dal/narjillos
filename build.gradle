allprojects {
  version = new File('version').getText().trim()

  apply plugin: 'java'
  apply plugin: 'application'
  apply plugin: 'eclipse'
  apply plugin: 'idea'

  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8

  eclipse {
    jdt {
      // Eclipse will use JDK 1.8 if it's been configured for that,
      // but it's still stuck in a Java 1.7 world
      sourceCompatibility = JavaVersion.VERSION_1_8
      targetCompatibility = JavaVersion.VERSION_1_8
    }
  }

  startScripts.enabled = false
  run.enabled = false

  repositories {
    mavenCentral()
  }

  dependencies {
    compile subprojects
    testCompile 'junit:junit:4.11'
  }

  jar {
    // skip empty JARs
    onlyIf { !sourceSets.main.allSource.files.isEmpty() }
  }

  createStartScript('narjillos', project, 'org.nusco.narjillos.PetriDish', [])
  createStartScript('petri', project, 'org.nusco.narjillos.PetriDish', ['-Xmx8192M', '-Xms8192M'])
  createStartScript('experiment', project, 'org.nusco.narjillos.ExperimentalLab', ['-Xmx8192M', '-Xms8192M'])
}

project(':narjillos-core') {
  dependencies {
    compile 'com.google.code.gson:gson:2.3'
    compile 'commons-cli:commons-cli:1.2'
  }
}

project(':narjillos-petridish') {
  dependencies {
    compile project(':narjillos-core')
  }
}

def createStartScript(name, project, mainClass, jvmArgs) {
  def taskName = name + "StartScript"
  project.tasks.create(name: taskName, type: CreateStartScripts) {
    outputDir       = new File(project.buildDir, 'scripts')
    mainClassName   = mainClass
    applicationName = name
    classpath       = project.tasks[JavaPlugin.JAR_TASK_NAME].outputs.files + project.configurations.runtime
    applicationDefaultJvmArgs = jvmArgs
  }

  project.tasks[taskName].dependsOn(project.jar)

  project.applicationDistribution.with {
    into("bin") {
      from(project.tasks[taskName])
      fileMode = 0755
    }
  }
}

def commandLineArgsOr(defaultArgs) {
  if(project.hasProperty('args') && project.getProperty('args').trim().length() > 0)
    return project.args.split('\\s+')
  else
    return defaultArgs
}

task(experiment, dependsOn: 'build', type: JavaExec) {
  main = 'org.nusco.narjillos.ExperimentalLab'
  classpath = project('narjillos-core').sourceSets.main.runtimeClasspath
  args commandLineArgsOr([])
  maxHeapSize "8192M"
}

task(petri, dependsOn: 'build', type: JavaExec) {
  main = 'org.nusco.narjillos.PetriDish'
  classpath = project('narjillos-petridish').sourceSets.main.runtimeClasspath
  args commandLineArgsOr([])
  maxHeapSize "8192M"
}

task(ancestry, dependsOn: 'build', type: JavaExec) {
  main = 'org.nusco.narjillos.Ancestry'
  classpath = project('narjillos-core').sourceSets.main.runtimeClasspath
  args commandLineArgsOr([])
  maxHeapSize "8192M"
}

task(perftest, dependsOn: 'build', type: JavaExec) {
  main = 'org.nusco.narjillos.PerformanceTest'
  classpath = project('narjillos-core').sourceSets.main.runtimeClasspath
}

task(deterministicExperimentTest, dependsOn: 'build', type: JavaExec) {
  main = 'org.nusco.narjillos.DeterministicExperimentTest'
  classpath = project('narjillos-core').sourceSets.test.runtimeClasspath
}

task(backlog, dependsOn: 'build', type: JavaExec) {
  main = 'org.nusco.narjillos.Backlog'
  classpath = project('narjillos-core').sourceSets.main.runtimeClasspath
  args commandLineArgsOr("10")
}

task(bl, dependsOn: 'backlog')

task allTests(dependsOn: ['test', 'deterministicExperimentTest'])

task prepareRelease(dependsOn: ['allTests', 'installApp'])
