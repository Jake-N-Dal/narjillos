// Plugins

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'idea'


// Basic Configuration

version = new File('version').getText().trim()
sourceCompatibility = JavaVersion.VERSION_1_8
mainClassName = 'org.nusco.narjillos.NarjillosRunner'

// Dependencies

repositories {
  mavenCentral()
}

dependencies {
  compile 'com.google.code.gson:gson:2.3'
  compile 'commons-cli:commons-cli:1.2'
  compile 'org.yaml:snakeyaml:1.15'
  testCompile 'junit:junit:4.11'
}


// Programs

createProgramTask('experiment', 'org.nusco.narjillos.ExperimentRunner', 'Runs an experiment (same arguments as the \'experiment\' script).')
createProgramTask('narjillos', 'org.nusco.narjillos.NarjillosRunner', 'Runs Narjillos (same arguments as the \'narjillos\' script).')
createProgramTask('ancestry', 'org.nusco.narjillos.Ancestry', 'Runs ancestry analysis (pass it the *.exp filename).')


// Tests

task(performanceTest, dependsOn: 'build', type: JavaExec) {
  description = 'Runs performance test.'
  group = 'verification'
  main = 'org.nusco.narjillos.PerformanceTest'
  classpath = sourceSets.main.runtimeClasspath
}

task(testDeterministicBehavior, dependsOn: 'build', type: JavaExec) {
  description = 'Runs the (slow) test that checks whether the system is deterministic.'
  group = 'verification'
  main = 'org.nusco.narjillos.DeterministicExperimentTest'
  classpath = sourceSets.test.runtimeClasspath
}

task testAll(dependsOn: ['test', 'testDeterministicBehavior']) {
  description = 'Runs all the tests, including the slow ones.'
  group = 'verification'
}


// Backlog Management

task(bl, dependsOn: 'build', type: JavaExec) {
  main = 'org.nusco.narjillos.Backlog'
  classpath = sourceSets.main.runtimeClasspath
  args commandLineArgsOr('10') // show minimum 10 lines unless the user specifies something else
}

task(backlog, dependsOn: 'bl') {
  description = 'Prints the top of the backlog. Also aliased to \'bl\'.'
  group = 'development'
}


// Packaging

distributions {
  main {
    contents {
        from { 'version' }
        from { 'LICENSE' }
        from { 'README.md' }
        from { 'config.yaml' }
    }
  }
}

task release(dependsOn: ['testAll', 'createStartupScripts', 'assembleMainDist']) {
  description = 'Runs all tests and packages a release.'
  group = 'distribution'
}

task createStartupScripts(dependsOn: 'installDist') {
  createStartupScript('experiment', 'org.nusco.narjillos.ExperimentRunner', ['-Xmx4g'])
}


// Helpers

def createStartupScript(name, mainClass, jvmArgs) {
  def taskName = name + 'StartScript'
  tasks.create(name: taskName, type: CreateStartScripts) {
    outputDir = new File(buildDir, 'scripts')
    mainClassName = mainClass
    applicationName = name
    classpath = tasks[JavaPlugin.JAR_TASK_NAME].outputs.files + configurations.runtime
    applicationDefaultJvmArgs = jvmArgs
  }

  tasks[taskName].dependsOn(project.jar)

  applicationDistribution.with {
    into('bin/') {
      from(tasks[taskName])
      fileMode = 0755
    }
  }
}

def createProgramTask(taskName, taskMainClassName, taskDescription) {
  tasks.create(name: taskName, type: JavaExec) {
    description = taskDescription
    group = 'programs'
    main = taskMainClassName
    classpath = sourceSets.main.runtimeClasspath
    args commandLineArgsOr([])
    maxHeapSize '4g'
  }
}

def commandLineArgsOr(defaultArgs) {
  if(project.hasProperty('args') && project.getProperty('args').trim().length() > 0)
    return project.args.split('\\s+')
  else
    return defaultArgs
}
