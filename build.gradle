apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'idea'

version = new File('version').getText().trim()
sourceCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
}

dependencies {
    compile 'com.google.code.gson:gson:2.3'
    compile 'commons-cli:commons-cli:1.2'
    compile 'org.yaml:snakeyaml:1.15'
    testCompile 'junit:junit:4.11'
}

startScripts.enabled = false
run.enabled = false

createStartScripts('narjillos', project, 'org.nusco.narjillos.NarjillosRunner', ['-Xmx4g'])
createStartScripts('experiment', project, 'org.nusco.narjillos.ExperimentRunner', ['-Xmx4g'])

def createStartScripts(name, project, mainClass, jvmArgs) {
  def taskName = name + "StartScript"
  project.tasks.create(name: taskName, type: CreateStartScripts) {
    outputDir       = new File(project.buildDir, 'scripts')
    mainClassName   = mainClass
    applicationName = name
    classpath       = project.tasks[JavaPlugin.JAR_TASK_NAME].outputs.files + project.configurations.runtime
    applicationDefaultJvmArgs = jvmArgs
  }

  project.tasks[taskName].dependsOn(project.jar)

  project.applicationDistribution.with {
    into("bin") {
      from(project.tasks[taskName])
      fileMode = 0755
    }
  }
}

def commandLineArgsOr(defaultArgs) {
  if(project.hasProperty('args') && project.getProperty('args').trim().length() > 0)
    return project.args.split('\\s+')
  else
    return defaultArgs
}

task(experiment, dependsOn: 'build', type: JavaExec) {
  main = 'org.nusco.narjillos.ExperimentRunner'
  classpath = sourceSets.main.runtimeClasspath
  args commandLineArgsOr([])
  maxHeapSize "4g"
}

task(narjillos, dependsOn: 'build', type: JavaExec) {
  main = 'org.nusco.narjillos.NarjillosRunner'
  classpath = sourceSets.main.runtimeClasspath
  args commandLineArgsOr([])
  maxHeapSize "4g"
}

task(ancestry, dependsOn: 'build', type: JavaExec) {
  main = 'org.nusco.narjillos.Ancestry'
  classpath = sourceSets.main.runtimeClasspath
  args commandLineArgsOr([])
  maxHeapSize "4g"
}

task(perftest, dependsOn: 'build', type: JavaExec) {
  main = 'org.nusco.narjillos.PerformanceTest'
  classpath = sourceSets.main.runtimeClasspath
}

task(deterministicExperimentTest, dependsOn: 'build', type: JavaExec) {
  main = 'org.nusco.narjillos.DeterministicExperimentTest'
  classpath = sourceSets.test.runtimeClasspath
}

task(backlog, dependsOn: 'build', type: JavaExec) {
  main = 'org.nusco.narjillos.Backlog'
  classpath = sourceSets.main.runtimeClasspath
  args commandLineArgsOr("10")
}

task(bl, dependsOn: 'backlog')

task allTests(dependsOn: ['test', 'deterministicExperimentTest'])

task prepareRelease(dependsOn: ['allTests', 'installApp'])
